infostr = '{"intervalsize": 1000000000, "use_mcpat": true, "num_intervals": 31, "name": "example"}';
palette = new Rickshaw.Color.Palette( { scheme: 'munin' } );
cpipercentagelabels = [{"color": "rgb(101,0,0)", "name": "base"}, {"color": "rgb(140,0,0)", "name": "dispatch_width"}, {"color": "rgb(178,0,0)", "name": "depend-int"}, {"color": "rgb(216,0,0)", "name": "depend-branch"}, {"color": "rgb(255,0,0)", "name": "issue-port2"}, {"color": "rgb(255,38,38)", "name": "issue-port34"}, {"color": "rgb(255,76,76)", "name": "issue-port5"}, {"color": "rgb(255,114,114)", "name": "issue-port015"}, {"color": "rgb(255,153,153)", "name": "serial"}, {"color": "rgb(255,255,0)", "name": "branch"}, {"color": "rgb(0,102,0)", "name": "ifetch"}, {"color": "rgb(0,255,0)", "name": "mem-l1d"}, {"color": "rgb(153,255,153)", "name": "mem-dram"}, {"color": "rgb(0,0,102)", "name": "imbalance-start"}, {"color": "rgb(153,153,255)", "name": "imbalance-end"}];
palette = new Rickshaw.Color.Palette( { scheme: 'munin' } );
cpipercentagesimplifiedlabels = [{"color": "rgb(255,0,0)", "name": "compute"}, {"color": "rgb(255,255,0)", "name": "branch"}, {"color": "rgb(0,255,0)", "name": "memory"}, {"color": "rgb(0,0,255)", "name": "synchronize"}];
palette = new Rickshaw.Color.Palette( { scheme: 'munin' } );
cpificlabels = [{"color": "rgb(101,0,0)", "name": "base"}, {"color": "rgb(140,0,0)", "name": "dispatch_width"}, {"color": "rgb(178,0,0)", "name": "depend-int"}, {"color": "rgb(216,0,0)", "name": "depend-branch"}, {"color": "rgb(255,0,0)", "name": "issue-port2"}, {"color": "rgb(255,38,38)", "name": "issue-port34"}, {"color": "rgb(255,76,76)", "name": "issue-port5"}, {"color": "rgb(255,114,114)", "name": "issue-port015"}, {"color": "rgb(255,153,153)", "name": "serial"}, {"color": "rgb(255,255,0)", "name": "branch"}, {"color": "rgb(0,102,0)", "name": "ifetch"}, {"color": "rgb(0,255,0)", "name": "mem-l1d"}, {"color": "rgb(153,255,153)", "name": "mem-dram"}, {"color": "rgb(0,0,102)", "name": "imbalance-start"}, {"color": "rgb(153,153,255)", "name": "imbalance-end"}];
palette = new Rickshaw.Color.Palette( { scheme: 'munin' } );
simplelabels = [{"color": "rgb(255,0,0)", "name": "compute"}, {"color": "rgb(255,255,0)", "name": "branch"}, {"color": "rgb(0,255,0)", "name": "memory"}, {"color": "rgb(0,0,255)", "name": "synchronize"}];
palette = new Rickshaw.Color.Palette( { scheme: 'munin' } );
powerlabels = [{"color": palette.color(), "name": "core-alu"}, {"color": palette.color(), "name": "core-int"}, {"color": palette.color(), "name": "core-fp"}, {"color": palette.color(), "name": "other"}, {"color": palette.color(), "name": "core-core"}, {"color": palette.color(), "name": "core-mem"}, {"color": palette.color(), "name": "icache"}, {"color": palette.color(), "name": "dcache"}, {"color": palette.color(), "name": "l3"}, {"color": palette.color(), "name": "dram"}, {"color": palette.color(), "name": "core-ifetch"}];
palette = new Rickshaw.Color.Palette( { scheme: 'munin' } );
energylabels = [{"color": palette.color(), "name": "core-alu"}, {"color": palette.color(), "name": "core-int"}, {"color": palette.color(), "name": "core-fp"}, {"color": palette.color(), "name": "other"}, {"color": palette.color(), "name": "core-core"}, {"color": palette.color(), "name": "core-mem"}, {"color": palette.color(), "name": "icache"}, {"color": palette.color(), "name": "dcache"}, {"color": palette.color(), "name": "l3"}, {"color": palette.color(), "name": "dram"}, {"color": palette.color(), "name": "core-ifetch"}];
palette = new Rickshaw.Color.Palette( { scheme: 'munin' } );
energypercentagelabels = [{"color": palette.color(), "name": "core-alu"}, {"color": palette.color(), "name": "core-int"}, {"color": palette.color(), "name": "core-fp"}, {"color": palette.color(), "name": "other"}, {"color": palette.color(), "name": "core-core"}, {"color": palette.color(), "name": "core-mem"}, {"color": palette.color(), "name": "icache"}, {"color": palette.color(), "name": "dcache"}, {"color": palette.color(), "name": "l3"}, {"color": palette.color(), "name": "dram"}, {"color": palette.color(), "name": "core-ifetch"}];
